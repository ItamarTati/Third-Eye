{"version":3,"sources":["images/faker.jpg","components/overwatch montage clarity.mp4","components/Header.js","components/Media.js","components/Roster.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","id","autoPlay","loop","muted","src","OverwatchVideo","type","href","class","Component","Media","data-height","data-dnt","data-theme","data-link-color","async","charset","width","height","frameborder","allow","allowfullscreen","title","Roster","Faker","alt","App","Header_Header","Roster_Roster","Media_Media","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6047b32e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/faker.3ffd650b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/overwatch montage clarity.4bc6c3a7.mp4\";","import React, { Component } from 'react';\nimport OverwatchVideo from './overwatch montage clarity.mp4'\n\nexport default class Header extends Component {\n    render()\n    {\n        return (\n            <div className='title'>\n            <header>\n                <span>\n                <video id='video-background' autoPlay loop muted>\n                <source src={OverwatchVideo} type='video/mp4'/>\n                </video>\n                    <div className=\"top\">\n                        <h1>Third-Eye Esports</h1>\n                    </div>\n                    <a href = '#roster'> <div class=\"arrow\"></div> </a>  \n                </span>\n            </header>\n            </div>\n            \n            \n        );\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class Media extends Component {\n    render()\n    {\n        return (\n            <div className = 'media'>\n                <h1>Media</h1> \n                <div className = 'secondContainer'>\n                    <div>\n                        <a class=\"twitter-timeline\" data-height=\"400\" data-dnt=\"true\" data-theme=\"light\" \n                        data-link-color=\"#2B7BB9\" href=\"https://twitter.com/Third_EyeEsport?ref_src=twsrc%5Etfw\">\n                        Tweets by Third_EyeEsport</a> <script async src=\"https://platform.twitter.com/widgets.js\" \n                        charset=\"utf-8\"></script>\n                    </div>\n                    <div> \n                        <iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/8WVPtPtDzz0\" \n                        frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n                        allowfullscreen title = 'Clarity'></iframe>                 \n                    </div>\n                </div>\n            </div>\n            \n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Faker from '../images/faker.jpg'\n\n\n\nexport default class Roster extends Component {\n    render()\n    {\n        return (\n            \n    <div id ='roster'>\n        <h2>Third-Eye Overwatch roster</h2>\n        <div className='container'>\n        <div className='players'>\n                <img src={Faker} alt = 'Faker'/>\n                <div className='players-overlay'>\n                <h1>Faker</h1>\n                <p>Lee Sang-hyeok (Korean: 이상혁, born May 7, 1996), known by his in-game name \"Faker\" (Korean: 페이커), \n                is a South Korean professional League of Legends player. Formerly known as \"GoJeonPa\" (Korean: 고전파) \n                on the Korean server, he was picked up by SK Telecom in 2013 and is currently the mid laner for SK \n                Telecom T1, which competes in the League of Legends Champions</p>\n                </div>\n        </div>\n        <div className='players'>\n                <img src={Faker} alt = 'Faker'/>\n                <div className='players-overlay'><h1>Faker</h1>\n                <p>Lee Sang-hyeok (Korean: 이상혁, born May 7, 1996), known by his in-game name \"Faker\" (Korean: 페이커), \n                is a South Korean professional League of Legends player. Formerly known as \"GoJeonPa\" (Korean: 고전파) \n                on the Korean server, he was picked up by SK Telecom in 2013 and is currently the mid laner for SK \n                Telecom T1, which competes in the League of Legends Champions</p>\n                </div>\n        </div>\n        <div className='players'>\n                <img src={Faker} alt = 'Faker'/>\n                <div className='players-overlay'><h1>Faker</h1>\n                <p>Lee Sang-hyeok (Korean: 이상혁, born May 7, 1996), known by his in-game name \"Faker\" (Korean: 페이커), \n                is a South Korean professional League of Legends player. Formerly known as \"GoJeonPa\" (Korean: 고전파) \n                on the Korean server, he was picked up by SK Telecom in 2013 and is currently the mid laner for SK \n                Telecom T1, which competes in the League of Legends Champions</p>\n                </div>\n        </div>\n        <div className='players'>\n                <img src={Faker} alt = 'Faker'/>\n                <div className='players-overlay'><h1>Faker</h1>\n                <p>Lee Sang-hyeok (Korean: 이상혁, born May 7, 1996), known by his in-game name \"Faker\" (Korean: 페이커), \n                is a South Korean professional League of Legends player. Formerly known as \"GoJeonPa\" (Korean: 고전파) \n                on the Korean server, he was picked up by SK Telecom in 2013 and is currently the mid laner for SK \n                Telecom T1, which competes in the League of Legends Champions</p>\n                </div>\n        </div>\n        <div className='players'>\n                <img src={Faker} alt = 'Faker'/>\n                <div className='players-overlay'><h1>Faker</h1>\n                <p>Lee Sang-hyeok (Korean: 이상혁, born May 7, 1996), known by his in-game name \"Faker\" (Korean: 페이커), \n                is a South Korean professional League of Legends player. Formerly known as \"GoJeonPa\" (Korean: 고전파) \n                on the Korean server, he was picked up by SK Telecom in 2013 and is currently the mid laner for SK \n                Telecom T1, which competes in the League of Legends Champions</p>\n                </div>\n        </div>\n        <div className='players'>\n                <img src={Faker} alt = 'Faker'/>\n                <div className='players-overlay'><h1>Faker</h1>\n                <p>Lee Sang-hyeok (Korean: 이상혁, born May 7, 1996), known by his in-game name \"Faker\" (Korean: 페이커), \n                is a South Korean professional League of Legends player. Formerly known as \"GoJeonPa\" (Korean: 고전파) \n                on the Korean server, he was picked up by SK Telecom in 2013 and is currently the mid laner for SK \n                Telecom T1, which competes in the League of Legends Champions</p>\n                </div>\n        </div>\n\n        </div>\n    </div>\n\n   \n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header.js'\nimport Media from './components/Media.js'\nimport Roster from './components/Roster.js'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\"> \n        <Header />\n        <Roster />\n        <Media />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}